#!/bin/bash

#
# This script creates a disk image of Raspbian that contains an
# additional recovery partition that can be used to reset a Raspbian
# installation back to 'factory fresh'
#
# This is an interactive script
#
# @mrpjevans
#
# Insipration: http://www.limepepper.co.uk/raspberry-pi/2018/04/15/Remote-factory-reset-for-raspberry-pi-2.html
#

# Update if needed
RASPBIAN_LITE_URL="https://downloads.raspberrypi.org/raspbian_lite_latest"
RASPBIAN_FULL_URL="https://downloads.raspberrypi.org/raspbian_full_latest"
RASPBIAN_FULL=
RASPBIAN_LITE=

# You really need to be root to do this
if [ "$EUID" -ne 0 ]
  then echo "Please run as root or sudo"
  exit
fi

cat << EOF
Restorable Raspbian Image Generator
===================================

(c) PJ Evans @mrpjevans 2019 (MIT License)

Welcome, noble traveller. this script will create a Raspbian .img file that
contains an additional recovery partition. This partition, sandwiches between
the boot partition and the rootfs partition, will contain a bootable Raspbian
Lite and a copy of the rootfs image. If desired, you can wipe the current
rootfs at any time with the 'clean' version, resetting the Raspberry Pi
without any need to download images or burn SD cards. Additionally, you can
preserve a setup so things like Wi-Fi, hostnames, SSH keys can already be
implemented.

This is not an automated script (yet). There are a few questions to answer
along the way and you're going to need plenty of disk space.

EOF

read -r -p "Continue? [Y/n] " response
if [[ "$response" =~ ^([nN][oO]|[nN])+$ ]]; then
    exit 0
fi

cat << EOF

Setup
=====
Checking all the software we need is installed...
EOF

# Command line options
# SECTORS=0
#while getopts “:s:” opt; do
#  case $opt in
#    s) SECTORS=$OPTARG ;;
#  esac
#done

SOFTWARE_OK=0

# Check uuidgen is available
if [ -z $(command -v uuidgen) ]; then
  echo Command uuidgen not found
  SOFTWARE_OK=1
fi

# Check parted is available
if [ -z $(command -v parted) ]; then
  echo Command parted not found
  SOFTWARE_OK=1
fi

# Check curl is available
if [ -z $(command -v curl) ]; then
  echo Command curl not found
  SOFTWARE_OK=1
fi

# Check unzip is available
if [ -z $(command -v unzip) ]; then
  echo Command unzip not found
  SOFTWARE_OK=1
fi

# Check kpartex is available
if [ -z $(command -v kpartx) ]; then
  echo Command kpartx not found
  SOFTWARE_OK=1
fi

if [ $SOFTWARE_OK == 1 ]; then
  echo
  echo Some things I need are missing. Would you like me to install them?
  echo \(This is at your own risk!\)
  read -r -p "Install missing apps? [Y/n] " response
  if [[ "$response" =~ ^([nN][oO]|[nN])+$ ]]; then
      echo To install, please run the following command:
      echo apt install uuid-runtime parted curl unzip kpartx
      echo then restart this script.
      exit 1
  else
    apt update
    apt install -y uuid-runtime parted curl unzip kpartx
  fi

fi

select_file () {
  # $1: title prompt
  # $2: directory (./)
  wd=${2:-.}
  if [ -n $(which dialog) ]; then 
	FILE=$(dialog --stdout --title "$1" --fselect ${wd}/ 16 72); 
	#echo $FILE; 
  else 
	read -r -p "$1 (in ${wd})" FILE
	FILE="${wd}/$FILE"
  fi
  #FILE=$(dialog --stdout --title "Please choose a file" --fselect $HOME/ 16 72)
  echo $FILE
}

cat << EOF
OK

Working Directory
=================
Please let me know your preferred location for a working directory
EOF
response=$(select_file "working directory [./tmp]" ".")
#read -r -p "[./tmp]" response
if [ -z $response ]; then
  WORKDIR="./tmp"
else
  WORKDIR=$response
fi
if [ ! -d $WORKDIR ]; then
  mkdir $WORKDIR
  if ! [ $? -eq 0 ]; then
      echo I couldn\'t create that directory, sorry.
      exit 0
  fi
fi

cat << EOF

Latest Raspbian Versions
========================
EOF

read -r -p "Would you like to check for the latest Raspbian Full and Lite versions online? [Y/n] " response
if [[ "$response" =~ ^([nN][oO]|[nN])+$ ]]; then
  #read -r -p "Please enter the filename of Raspbian Lite (zip or img) in ${WORKDIR} " response
  response=$(select_file "Filename of Raspbian Lite (zip or img)" "$WORKDIR")
  if [ ! -f "$response" ];then 
    echo $response does not exist
    exit 1
  else
    RASPBIAN_LITE_REDIR=$response
  fi
  #read -r -p "Please enter the filename of Raspbian Full (zip or img) in ${WORKDIR} " response
  response=$(select_file "Filename of Raspbian Full (zip or img)" "$WORKDIR")
  if [ ! -f "$response" ];then 
    echo $response does not exist
    exit 1
  else
    RASPBIAN_FULL_REDIR=$response
  fi
else

  # Get true file names
  if [ "$RASPBIAN_FULL" == "" ]; then
    echo Fetching latest version info from Raspberry Pi
    RASPBIAN_LITE_REDIR=$(curl -sI $RASPBIAN_LITE_URL | grep Location | cut -d \  -f 2)
    RASPBIAN_LITE_REDIR=${RASPBIAN_LITE_REDIR%$'\r'}
    RASPBIAN_FULL_REDIR=$(curl -sI $RASPBIAN_FULL_URL | grep Location | cut -d \  -f 2)
    RASPBIAN_FULL_REDIR=${RASPBIAN_FULL_REDIR%$'\r'}
  fi

fi

# this is determining basenames
RASPBIAN_LITE=${RASPBIAN_LITE_REDIR##*\/}
RASPBIAN_FULL=${RASPBIAN_FULL_REDIR##*\/}
# Filenames without last extension
RASPBIAN_LITE_BASE=${RASPBIAN_LITE%.*}
RASPBIAN_FULL_BASE=${RASPBIAN_FULL%.*}
# TODO: determine the file type
# file, gzip -l, unzip

echo Target version for recovery partition is $RASPBIAN_LITE
echo Target version for root partition is $RASPBIAN_FULL

cat << EOF

Local Source Files
==================
EOF

# Do we have an zip? Lite
if [ ! -f "$WORKDIR/$RASPBIAN_LITE_BASE.img" ]; then
  echo $RASPBIAN_LITE_BASE.img not found
  if [ ! -f "$WORKDIR/$RASPBIAN_LITE" ]; then
    echo $RASPBIAN_LITE not found, downloading
    curl -L $RASPBIAN_LITE_REDIR > $WORKDIR/$RASPBIAN_LITE
  fi
  echo Unzipping $RASPBIAN_LITE
  unzip $WORKDIR/$RASPBIAN_LITE -d $WORKDIR
else
  echo $RASPBIAN_LITE_BASE.img found
fi

# Do we have an img? Full
if [ ! -f "$WORKDIR/$RASPBIAN_FULL_BASE.img" ]; then
  echo $RASPBIAN_FULL_BASE.img not found
  if [ ! -f "$WORKDIR/$RASPBIAN_FULL" ]; then
    echo $RASPBIAN_FULL not found, downloading
    curl -L $RASPBIAN_FULL_REDIR > $WORKDIR/$RASPBIAN_FULL
  fi
  echo Unzipping $RASPBIAN_FULL
  unzip $WORKDIR/$RASPBIAN_FULL -d $WORKDIR
else
  echo $RASPBIAN_FULL_BASE.img found
fi

# Sector calculations
cat << EOF

Sector calculations
===================
EOF

read -r -p "Make the image as small as possible or specify a sector size? [small] " response
if [ -z $response ] || [ $response == 'small' ];then 
  echo Making the smallest possible image size
  SECTORS=0
else
  echo Setting image to $response sectors
  SECTORS=$response
fi

# TODO: functionalize
# file, partition, start | end | size
FAT_START=$(fdisk -lu $WORKDIR/$RASPBIAN_LITE_BASE.img | grep .img1 | sed -n "s/ \+/ /gp" | cut -d ' ' -f 2)
PARTITION_1=$(fdisk -lu $WORKDIR/$RASPBIAN_LITE_BASE.img | grep .img1 | sed -n "s/ \+/ /gp" | cut -d ' ' -f 4)
LITE_ROOT_LENGTH=$(fdisk -lu $WORKDIR/$RASPBIAN_LITE_BASE.img | grep .img2 | sed -n "s/ \+/ /gp" | cut -d ' ' -f 4)
FULL_ROOT_LENGTH=$(fdisk -lu $WORKDIR/$RASPBIAN_FULL_BASE.img | grep .img2 | sed -n "s/ \+/ /gp" | cut -d ' ' -f 4)
# lite needs to contain the full root image too
PARTITION_2=$((LITE_ROOT_LENGTH+FULL_ROOT_LENGTH))

cat << EOF
FAT: $FAT_START sectors
Boot partition: $PARTITION_1 sectors
Raspbian Lite partition: $PARTITION_2 sectors
EOF

size_1MB=$((1024**2))
size_4MB=$((size_1MB * 4))

if [ "$SECTORS" -eq 0 ]; then
  PARTITION_3="$FULL_ROOT_LENGTH"
  SECTORS=$((FAT_START+PARTITION_1+PARTITION_2+FULL_ROOT_LENGTH))
  IMAGE_4MB=$((((SECTORS * 512) / size_4MB) + 1))
else
  echo Calculating based on an available size of $SECTORS sectors
  PARTITION_3=$((SECTORS-PARTITION_2-PARTITION_1-FAT_START))
  IMAGE_4MB=$(((SECTORS * 512) / size_4MB))
  if [ $PARTITION_3 -lt 1 ]; then
    echo Too few sectors, unable to continue
    exit 1
  fi
fi

IMAGE_BYTES=$((IMAGE_4MB * size_4MB))

cat << EOF
Raspbian Full partition: $PARTITION_3 sectors
Total sectors: $SECTORS
Total bytes: $IMAGE_BYTES

EOF
read -r -p "OK to build the image? [Y/n] " response
if [[ "$response" =~ ^([nN][oO]|[nN])+$ ]]; then
    exit 0
fi

cat << EOF

Create target image
===================
Creating a blank image $SECTORS sectors / $IMAGE_BYTES bytes / $IMAGE_4MB 4MB blocks
EOF

response="y"
if [ -f $WORKDIR/$RASPBIAN_FULL_BASE.restore.img ]; then
  read -r -p "Target image exists - recreate it? [y/N] " response
  if [[ "$response" =~ ^([Yy][Ee][Ss]|[Yy])+$ ]]; then
	response="y"
  fi
fi
if [ "$response" == "y"]; then
  dd if=/dev/zero bs=4M count=$IMAGE_4MB status=progress > $WORKDIR/$RASPBIAN_FULL_BASE.restore.img
fi

UUID_RESTORE=$(uuidgen)
UUID_ROOTFS=$(uuidgen)
PARTUUID=$(tr -dc 'a-f0-9' < /dev/urandom 2>/dev/null | head -c8)
PARTITION_2_START=$((FAT_START + PARTITION_1))
PARTITION_3_START=$((PARTITION_2_START + PARTITION_2))

cat << EOF

Create partitions
=================
Restore: $UUID_RESTORE
Root: $UUID_ROOTFS
Volume ID: $PARTUUID

Creating partition table
Boot: start=${FAT_START}, size=${PARTITION_1}, type=c
Recovery: start=${PARTITION_2_START}, size=${PARTITION_2}, type=83
Root: start=${PARTITION_3_START}, size=${PARTITION_3}, type=83
EOF

sfdisk $WORKDIR/$RASPBIAN_FULL_BASE.restore.img <<EOF
label: dos
label-id: 0x${PARTUUID}
unit: sectors

$RASPBIAN_FULL_BASE.img1 : start=${FAT_START}, size=${PARTITION_1}, type=c
$RASPBIAN_FULL_BASE.img2 : start=${PARTITION_2_START}, size=${PARTITION_2}, type=83
$RASPBIAN_FULL_BASE.img3 : start=${PARTITION_3_START}, size=${PARTITION_3}, type=83
EOF

cat << EOF

Mount images as devices
=======================
EOF

losetup -a

losetup -v -f $WORKDIR/$RASPBIAN_FULL_BASE.restore.img
losetup -v -f $WORKDIR/$RASPBIAN_LITE_BASE.img
losetup -v -f $WORKDIR/$RASPBIAN_FULL_BASE.img
sleep 1

BLANK_IMAGE_LOOPDEV=$(losetup -a | grep loop | grep $RASPBIAN_FULL_BASE.restore.img | cut -d ':' -f 1)
#| cut -d ' ' -f 1 | tr -dc '0-9')
echo "New image is device $BLANK_IMAGE_LOOPDEV"
kpartx -v -a $BLANK_IMAGE_LOOPDEV
sleep 1

LITE_IMAGE_LOOPDEV=$(losetup -a | grep loop | grep $RASPBIAN_LITE_BASE.img | cut -d ':' -f 1)
echo "Lite image is device $LITE_IMAGE_LOOPDEV"
kpartx -v -a $LITE_IMAGE_LOOPDEV
sleep 1

FULL_IMAGE_LOOPDEV=$(losetup -a | grep loop | grep $RASPBIAN_FULL_BASE.img | cut -d ':' -f 1)
echo "Full image is device $FULL_IMAGE_LOOPDEV"
kpartx -v -a $FULL_IMAGE_LOOPDEV
sleep 1

BLANK_IMAGE_MAPDEV=/dev/mapper/$(basename $BLANK_IMAGE_LOOPDEV)
LITE_IMAGE_MAPDEV=/dev/mapper/$(basename $LITE_IMAGE_LOOPDEV)
FULL_IMAGE_MAPDEV=/dev/mapper/$(basename $FULL_IMAGE_LOOPDEV)

cat << EOF

Copy images
===========
Copying boot partition
EOF

dd if=${LITE_IMAGE_MAPDEV}p1 of=${BLANK_IMAGE_MAPDEV}p1 status=progress bs=4M
echo Copying Raspbian Lite to partition 2
dd if=${LITE_IMAGE_MAPDEV}p2 of=${BLANK_IMAGE_MAPDEV}p2 status=progress bs=4M
echo Copying Raspbian Full to partition 3
dd if=${FULL_IMAGE_MAPDEV}p2 of=${BLANK_IMAGE_MAPDEV}p3 status=progress bs=4M

# This seems to be needed to let the system catch up
sleep 1

cat << EOF

Fix file systems
================
Setting IDs
EOF

tune2fs ${BLANK_IMAGE_MAPDEV}p2 -U ${UUID_RESTORE}
e2label ${BLANK_IMAGE_MAPDEV}p2 recoveryfs
tune2fs ${BLANK_IMAGE_MAPDEV}p3 -U ${UUID_ROOTFS}

echo Expanding recovery partition to full size
e2fsck -f ${BLANK_IMAGE_MAPDEV}p2
resize2fs ${BLANK_IMAGE_MAPDEV}p2

cat << EOF

Mount file systems
==================
EOF

mkdir -p tmp/mnt/restore_boot
mkdir -p tmp/mnt/restore_recovery
mkdir -p tmp/mnt/restore_rootfs

echo Mounting boot
mount ${BLANK_IMAGE_MAPDEV}p1 tmp/mnt/restore_boot
echo Mounting recovery
mount ${BLANK_IMAGE_MAPDEV}p2 tmp/mnt/restore_recovery
echo Mounting rootfs
mount ${BLANK_IMAGE_MAPDEV}p3 tmp/mnt/restore_rootfs

sleep 1

echo
echo Set boot partition to new ID and partition 3
echo ============================================

sed -i -r "s/(PARTUUID=.*?\-02)/PARTUUID=${PARTUUID}-03/g" tmp/mnt/restore_boot/cmdline.txt
echo Done

echo
echo Fix fstabs
echo ==========

UUID_BOOT=$(blkid -o export ${BLANK_IMAGE_MAPDEV}p1 | egrep '^UUID=' | cut -d'=' -f2)
echo UUID for new image is $UUID_BOOT

echo Writing root fstab
cat << EOF > tmp/mnt/restore_rootfs/etc/fstab
proc                     /proc  proc    defaults          0       0
UUID=${UUID_BOOT}  /boot  vfat    defaults          0       2
UUID=${UUID_ROOTFS}  /      ext4    defaults,noatime  0       1
EOF

echo Writing recovery fstab
cat << EOF > tmp/mnt/restore_recovery/etc/fstab
proc                    /proc  proc    defaults          0       0
UUID=${UUID_BOOT}       /boot  vfat    defaults          0       2
UUID=${UUID_RESTORE}    /      ext4    defaults,noatime  0       1
EOF

cat << EOF
System image is now bootable. In order to automatically restore back
from the recovery partition, some scripts need to be added to the
boot partition and changes made to rc.local on both Lite and Full.
You can proceed without this but the restore process will have to be
done manually.

EOF

read -r -p "Shall I create the recovery scripts? [Y/n] " response
if [[ "$response" =~ ^([yY][eE][sS]|[yY])+$ ]] || [[ "$response" == "" ]]; then

echo
echo Create recovery scripts
echo ======================

echo Creating boot_to_recovery
cat << EOF > tmp/mnt/restore_boot/boot_to_recovery
#!/bin/bash
if [ "$EUID" -ne 0 ]
  then echo "Please run as root"
  exit
fi

echo Rebooting to recovery partition in 5 seconds

if [ "\$1" = "restore" ]; then
    echo Automatic restore selected
    touch /boot/restore
fi

sleep 5
#sed -i 's/-03/-02/' /boot/cmdline.txt
sed -i 's/\(root=PARTUUID=\w\+\)-03/\1-02/' /boot/cmdline.txt
# for non UUID addressing
#sed -i 's?\(root=/dev/\w\+\)p3?\1p2?' /boot/cmdline.txt
touch /boot/ssh
reboot

exit 0
EOF

chmod +x tmp/mnt/restore_boot/boot_to_recovery

echo Creating boot_to_root
cat << EOF > tmp/mnt/restore_boot/boot_to_root
#!/bin/bash
if [ "$EUID" -ne 0 ]
  then echo "Please run as root"
  exit
fi

echo Rebooting to root partition in 5 seconds
sleep 5
#sed -i 's/-02/-03/' /boot/cmdline.txt
sed -i 's/\(root=PARTUUID=\w\+\)-02/\1-03/' /boot/cmdline.txt
# for non UUID addressing
#sed -i 's?\(root=/dev/\w\+\)p2?\1p3?' /boot/cmdline.txt
touch /boot/ssh
reboot
exit 0
EOF

chmod +x tmp/mnt/restore_boot/boot_to_root

echo Creating restore_root
cat << EOF > tmp/mnt/restore_boot/restore_root
#!/bin/bash
if [ -f "/boot/restore" ]; then
	echo Restoring rootfs
	dd if=/rootfs.img of=/dev/mmcblk0p3 conv=fsync status=progress bs=4M
	unlink /boot/restore
	/boot/boot_to_root
fi
exit 0
EOF

chmod +x tmp/mnt/restore_boot/restore_root

# TODO: backup_root
#  like restore_root
echo MISSING: Creating backup_root

echo Creating check_restore_gpio
cat << EOF > tmp/mnt/restore_boot/check_restore_gpio.py
import os
from gpiozero import Button

button = Button(21)

if button.is_pressed:
    print("Restore button is pressed")
    os.system("/boot/boot_to_recovery restore")
else:
    print("Restore button is not pressed")
EOF

echo Scripts created, now modifying rc.locals
sed -i '$ i /boot/restore_root' tmp/mnt/restore_recovery/etc/rc.local
sed -i '$ i /boot/backup_root' tmp/mnt/restore_recovery/etc/rc.local
sed -i '$ i python3 /boot/check_restore_gpio.py' tmp/mnt/restore_rootfs/etc/rc.local

# End of create recovery scripts
fi

echo Enabling SSH
touch tmp/mnt/restore_boot/ssh

# Wifi
cat << EOF

Wi-fi
=====
EOF

read -r -p "Configure Wi-fi? [Y/n] " response
if [[ "$response" =~ ^([yY][eE][sS]|[yY])+$ ]] || [[ "$response" == "" ]]; then
read -r -p "Country code (e.g. gb): " ccode
read -r -p "SSID: " ssid
read -r -p "PSK: " psk

cat << EOF > tmp/mnt/restore_recovery/etc/wpa_supplicant/wpa_supplicant.conf
country=${ccode}
update_config=1
ctrl_interface=/var/run/wpa_supplicant

network={
 scan_ssid=1
 ssid="${ssid}"
 psk="${psk}"
}
EOF

cat << EOF > tmp/mnt/restore_rootfs/etc/wpa_supplicant/wpa_supplicant.conf
country=${ccode}
update_config=1
ctrl_interface=/var/run/wpa_supplicant

network={
 scan_ssid=1
 ssid="${ssid}"
 psk="${psk}"
}
EOF

fi

cat << EOF

Create backup image
===================
EOF

read -r -p "Shall I image the current root partition to recovery? [Y/n] " response
if [[ "$response" =~ ^([yY][eE][sS]|[yY])+$ ]] || [[ "$response" == "" ]]; then
dd if=${BLANK_IMAGE_MAPDEV}p3 of=tmp/mnt/restore_recovery/rootfs.img status=progress bs=4M
fi

cat << EOF

Unmounting
==========
EOF

umount tmp/mnt/restore_boot
umount tmp/mnt/restore_recovery
umount tmp/mnt/restore_rootfs
sleep 5
rm -rf tmp/

kpartx -v -d ${BLANK_IMAGE_LOOPDEV}
kpartx -v -d ${LITE_IMAGE_LOOPDEV}
kpartx -v -d ${FULL_IMAGE_LOOPDEV}
#losetup --detach-all
losetup -d ${BLANK_IMAGE_LOOPDEV}
losetup -d ${LITE_IMAGE_LOOPDEV}
losetup -d ${FULL_IMAGE_LOOPDEV}

echo Done

exit 0
